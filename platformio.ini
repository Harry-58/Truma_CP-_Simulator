; PlatformIO Project Configuration File ä
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
; https://docs.platformio.org/en/latest/projectconf.html

[platformio]
default_envs =  ArduinoNano

[env]
;global gültig   aber nur wenn nicht lokal überschrieben !
;			     wenn auch lokale "build_flags" benötigt werden, müssen die globalen "build_flags" eingebunden werden  (build_flags = ${env.build_flags}  )
monitor_speed = 115200
;monitor_speed = 57600
;https://docs.platformio.org/en/latest/projectconf/section_env_monitor.html#projectconf-monitor-filters
;https://docs.platformio.org/en/latest/core/userguide/device/cmd_monitor.html#cmd-device-monitor-filters
monitor_filters =  default,  time, send_on_enter

;Verhindert Reset des Moduls wenn SerialMonitor gestartet wird
monitor_dtr = 0
monitor_rts = 0
build_type = debug          ; release,  debug      https://docs.platformio.org/en/latest/projectconf/build_configurations.html


lib_ldf_mode = chain+
;lib_ldf_mode = deep+

;;http://docs.platformio.org/en/latest/projectconf/section_env_build.html#build-flags
build_flags =
  -I E:/PlatformIO/_myLibs
  -I $PROJECT_DIR/include
  -D BAUD=${env.monitor_speed}
  -D ProjektName='""'                # wird durch script set_defines.py gefüllt mit Name aus $PROJECT_DIR
  -D VERSION='"V0.0"'
  -D DATESTAMP='""'                  # wird durch script set_defines.py gefüllt mit Compilezeit


  -D WLAN_SSID='"wlanSSID"'
  -D WLAN_PASS='"wlanPass"'

  -D WLAN_AP_PASS='"wlanApPass"'

  -D MQTT_HOST='"mqttHostIP"'
  -D MQTT_USER='"mqttUser"'
  -D MQTT_PASS='"mqttPass"'


#*** Beispiele
  -D FLAG1=""
  -D FLAG2=1
  -D FLAG3='"f3"'


#*** Beispiele mit holen aus Win-Enviroment (set)
;  -D TEST_PAR1='"${sysenv.Zpar1}"'


lib_extra_dirs =
     E:/PlatformIO/_myLibs
     E:/PlatformIO/_stdLibs

;https://docs.platformio.org/en/latest/projectconf/section_env_advanced.html
;https://docs.platformio.org/en/latest/projectconf/advanced_scripting.html#projectconf-advanced-scripting
extra_scripts =
 # pre:./scripts/extra_script1.py
  post:E:\PlatformIO\_scripts\set_defines.py

[env:Teensy]
platform =  teensy
board = teensy31
framework = arduino
upload_protocol = teensy-cli              ;teensy-gui = default
build_flags = ${env.build_flags}          ;wenn auch lokale "build_flags" benötigt werden, müssen die globalen "build_flags" eingebunden werden
				'-DTESTFLAG="test"'


[env:TeensyLC]
platform = teensy
board = teensylc
framework = arduino
upload_protocol = teensy-cli              ;teensy-gui = default


[env:ArduinoNano]
platform = atmelavr
board = nanoatmega328
framework = arduino
upload_port = COM17
                                #https://playground.arduino.cc/Main/Printf/
build_flags = ${env.build_flags} -Wl,-u,vfprintf -lprintf_flt -lm

[env:ArduinoMini]
platform = atmelavr
board = pro16MHzatmega328
framework = arduino
build_flags = ${env.build_flags} -Wl,-u,vfprintf -lprintf_flt -lm

#board_build.f_cpu = 1000000L     #Fuses müssen dazu entsprechend gesetzt werden
; fuses programieren   https://community.platformio.org/t/how-to-set-fuses-file/9403/11
; bei normalem Upload bleiben Fuses unverändert
; um Fuses zu setzen PlatformIO-Terminal öffnen und  "platformio run -t fuses"  ausführen (oder Fuses mit AVRDUDESS setzen)
;   https://docs.platformio.org/en/latest/platforms/atmelavr.html#fuses-programming
;   https://www.engbedded.com/fusecalc/
#board_fuses.lfuse = 0xFF
#board_fuses.hfuse = 0xD2
#board_fuses.efuse = 0xFF


[env:ArduinoUno]
platform = atmelavr
board = uno
framework = arduino
build_flags = ${env.build_flags} -Wl,-u,vfprintf -lprintf_flt -lm


[env:esp32]
platform = espressif32
; https://docs.platformio.org/en/latest/platforms/espressif32.html#boards
;board = esp32dev
board = wemos_d1_mini32
framework = arduino
board_build.f_cpu = 240000000L
upload_speed = 921600

monitor_filters = ${env.monitor_filters}, esp32_exception_decoder
#upload_protocol = espota
#upload_port = 192.168.178.26
#upload_flags =
#   --auth=${sysenv.OTApw}


[env:esp8266]
platform = espressif8266
; https://community.platformio.org/t/how-to-fix-isr-not-in-iram/8031
;https://github.com/esp8266/Arduino/issues/6127
; Interruptroutien muss void ICACHE_RAM_ATTR vorangestellt werden

; https://docs.platformio.org/en/latest/platforms/espressif8266.html#boards
;board = esp12e
board = d1_mini
framework = arduino

board_build.f_cpu = 80000000L
upload_speed = 921600

monitor_filters = ${env.monitor_filters}, esp8266_exception_decoder

lib_deps =
  plerup/EspSoftwareSerial @ ^6.16.1
